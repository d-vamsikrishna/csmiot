 be
//led code//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import sys 
import time 
sys.path.append("/home/pi/1602-21-733/Adafruit_MCP230xx")
from Adafruit_MCP230xx import Adafruit_MCP230XX 
mcp=Adafruit_MCP230XX(busnum=1, address=0x20,num_gpios=16) 
mcp.config(0,mcp.OUTPUT)
mcp.config(1,mcp.OUTPUT) 
mcp.config(2,mcp.OUTPUT) 
mcp.config(3,mcp.OUTPUT) 
mcp.config(4,mcp.OUTPUT)
mcp.config(5,mcp.OUTPUT) 
mcp.config(6,mcp.OUTPUT) 
mcp.config(7,mcp.OUTPUT) 
mcp.config(8,mcp.OUTPUT) 
mcp.config(9,mcp.INPUT)
mcp.config(10,mcp.INPUT) 

while True: 
	mcp.output(2,0)
	if mcp.input(9) == 512 :
		mcp.output(2,1)
	if mcp.input(10) == 0 : 
		mcp.output(2,0)
	mcp.output(3,1) 
	time.sleep(5)


//Ultrasonic sensor///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import sys
import time
import RPi.GPIO as GPIO

GPIO.setwarnings(False)
GPIO.setmode(GPIO.BOARD)
GPIO_TRIGGER = 16
GPIO_ECHO = 18
GPIO.setup(GPIO_TRIGGER, GPIO.OUT)
GPIO.setup(GPIO.ECHO, GPIO.IN)
GPIO.output(GPIO_TRIGGER, False)
time.sleep(1)

while(True):
	GPIO.output(GPIO_TRIGGER, True)
	time.sleep(1)
	GPIO.output(GPIO_TRIGGER, False)
	while(GPIO.input(GPIO_ECHO) == 0):
		start = time.time()
	while(GPIO.input(GPIO_ECHO) == 1):
		stop = time.time()
	distance = ((stop-start)*34300)/2
	print("distance :%.2f" % distance)

#Pins Connection
Vcc=5V Output
Trig=RPI16 //This is gpresent on kit left side on board
ECHO=RPI18
Gnd=GND



//PIR//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import sys 
sys.path.append('/home/pi/Adafruit-Raspberry-Pi-Python-Code-legacy/Adafruit_MCP230xx')
from Adafruit_MCP230xx import Adafruit_MCP230XX
import time 
mcp=Adafruit_MCP230XX(busnum=1,address=0x21,num_gpios=16)
mcp.config(0,mcp.INPUT) 
mcp.pullup(0,1) 
while True: 
	i=mcp.input(0) 
	time.sleep(1) 
	if i==1: 
		print "person detect" 
		time.sleep(1) 
	if i==0: 
		print("person not detect") 
		time.sleep(1) 

#Pins Connection
1pin-GND
2pin-GPA0//left side of board
3pin-VCC 5v


//soil moisture ////////////////////////////////////////////////////////////////////////////////////////////////////

import time

import Adafruit_GPIO.SPI as SPI

import Adafruit_ MCP3008

SPI_PORT=0

SPI _DEVICE=0

mcp=Adafruit_MCP3008.MCP3008(spi = SPI. SpiDev(SPI_ PORT,SPI_DEVICE))

while True:

 t=mcp. read_adc(0)

 p= (100- (t/1023. 0) *100) 

 print( â€˜moisture content is', p)

 time. sleep (3)

#Pins connections
VCC-VCC 5v
GND-GND
A0-A0




#servo motor////////////////////////////////////////////////////////////////////////////////////////////////////

import RPi 
import RPi.GPIO as GPIO 
import time 
 
GPIO.setmode(GPIO.BOARD) 
GPIO.setup(22, GPIO.OUT) 
 
pwm=GPIO.PWM(22,100) 
pwm.start(5) 
 
angle1=10 
duty1= float(angle1)/10 + 2.5 
angle2=160 
duty2= float(angle2)/10 + 2.5 
ck=0 
while ck<=5: 
	pwm.ChangeDutyCycle(duty1) 
	time.sleep(0.8)  
	pwm.ChangeDutyCycle(duty2) 
	time.sleep(0.8) 
	ck=ck+1 
	time.sleep(1) 
GPIO.cleanup() 

#Pins connection
ASH color- GND
RED-VCC
Yellow-RPI 22



//Thingspeak the data will be uploaded to cloud////////////////////////////////////////////////////////////////////////////////////////////////////
c
#To see the output
Go to thingspeak go to apikeys then copy the link of read feed channel and open it 



//Bluetooth////////////////////////////////////////////////////////////////////////////////////////////////////
Server program(Server.py)
import time
import sys
import bluetooth
server_sock=bluetooth.BluetoothSocket(bluetooth.RFC)
port=1
server_sock.bind(("",port))
server_sock.listen(1)
client_sock, address=server_sock.accept()
print("Accepted connection from ",address)
while(True):
	data=client_sock.recv(1024)
	print("received [%s]"% data)
	text=raw_input("ENTER YOUR MESSAGE:")
	client sock.send(text)
client sock.close()
server_sock.close()


Client program(Client.py)
import time
import bluetooth
bd_addr="88:27:EB:5A:15:EF"// this you will get from command prompt when you type all those commands
port=1
sock=bluetooth.BluetoothSocket(bluetooth.RFCOMM)
sock.connect((bd_addr,port))
while True:
	text=raw_input("ENTER YOUR MESSAGE:")
	sock.send(text)
	data=sock.recv(1024)
	print("received[%s] %data)
	time.sleep(1)
sock.close()

Type this in command pompt
sudo apt-get install bluetooth
sudo apt-get install bluez
sudo apt-get install python-bluez
sudo bluetoothctl
power on
agent on
default-agent
discoverable on
scan on

#first run server.py  
#then client.py

Mqtt /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
mqtt.py 
import paho.mqtt.client as mqtt
def on_connect(client, userdata, flags, rc): 
	print("Connected with MQTT Server" + str(rc)) 
	client.subscribe(iot/vce")

def on_message(client, userdata, msg):
	print(msg.topic+str(msg.payload))

client=mqtt.Client()
client.on_connect = on_connect
client.on_message=on_message 
client.connect("test mosquito.org", 1863, 60)
client.loop_forever()


subs.py
import paho.mqtt.publish as publish
import BME280lib as b
t,p,h=b.readBME280All()
publish.single('iot/vce","temperature %s"%t, hostname="test.mosquito.org")
print("Done")

#first run subs.py
#then run mqtt.py
///////////////////////////////////////////////////////////////////////////////////////
import RPi.GPIO as GPIO
import time

# Set GPIO mode
GPIO.setmode(GPIO.BCM)

# Define GPIO pins for LED, servo motor, and buzzer
LED_PIN = 18
SERVO_PIN = 17
BUZZER_PIN = 22

GPIO.setup(LED_PIN, GPIO.OUT)
GPIO.setup(SERVO_PIN, GPIO.OUT)
GPIO.setup(BUZZER_PIN, GPIO.OUT)

def read_moisture():
    import random
    return random.randint(0, 100)

def turn_on_led():
    GPIO.output(LED_PIN, GPIO.HIGH)

def turn_off_led():
    GPIO.output(LED_PIN, GPIO.LOW)

def turn_servo():
    pwm = GPIO.PWM(SERVO_PIN, 50)
    pwm.start(0)
    duty = 90 / 18 + 2
    GPIO.output(SERVO_PIN, True)
    pwm.ChangeDutyCycle(duty)
    time.sleep(1)
    GPIO.output(SERVO_PIN, False)
    pwm.ChangeDutyCycle(0)
    pwm.stop()

def beep_buzzer():
    GPIO.output(BUZZER_PIN, GPIO.HIGH)
    time.sleep(3)
    GPIO.output(BUZZER_PIN, GPIO.LOW)

try:
    while True:
        moisture_level = read_moisture()
        print("Moisture level:", moisture_level)
        
        if moisture_level < 20:
            turn_servo()
            beep_buzzer()
        elif moisture_level < 50:
            turn_on_led()
        else:
            turn_off_led()
        
        time.sleep(5)  # Adjust the interval as needed

except KeyboardInterrupt:
    GPIO.cleanup()





node red installation/////////////////////////////////

npm install -g --unsafe-perm node-red
node-red   go to the server running 

there will inject node you need to select the topic set the topic and connect to mqttout
in mqtt set the server as 127.0.0.1 and retain as true and assign qos as 0 and change the name to publisher

next take mqtt in(subscriber) and debug component and connect both of them and you need to 
enter the data in the debug and write the topic which was used earlier while setting inject node

and mqtt in topic name which was given previous and in debug component







zigbee ///////

#FOR coordinator node

import time
import serial
s=serial.Serial(port='/dev/ttyUSB0', baudrate=9600, parity=serial.PARITY_NONE, stopbits=serial.STOPBITS_ONE, bytesize=serial.EIGHTBITS, timeout=1)
while(1):
    x=s.readline().strip()
    print(x)

#For END DEVICE node :

import time
import serial
ser=serial.Serial(port='/dev/ttyUSB0;, baudrate=9600,parity=serial.PARITY_NONE, stopbits =serial.STOPBITS_ONE,bytesize=serial.EIGHTBITS, timeout=1)
c=0
while True:
    x=raw input('Enter text to send to coordinator:')
		ser.write(x)
time.sleep(1) 


#For ROUTER node:

import time
import serial
ser=serial.Serial(port='/dev/ttyUSB0;, baudrate=9600,parity=serial. PARITY_NONE, stopbits =serial.STOPBITS_ONE,bytesize=serial.EIGHTBITS,timeout=1)
c=0
while True:
	x=raw_input('Enter text to send to coordinator:')
	ser.write(x) 
  
  
  



  
  
  //////////////////////////////////////// Zigbee config /////////////////////////////////////////////////////
  
  
  https://drive.google.com/file/d/1rb40WD0BkLNn-GlIblOHmnXokuG3SX2X/view?usp=sharing
  
  
  
  
  
  
  
  //////8th ANS
  
  import time
import serial
import sys
import BME280lib as BME  # Ensure BME280lib is in the correct path or installed

# Initialize the serial connection for Zigbee communication
ser = serial.Serial(port='/dev/ttyUSB0', baudrate=9600, parity=serial.PARITY_NONE, stopbits=serial.STOPBITS_ONE, bytesize=serial.EIGHTBITS, timeout=1)

def read_bme280():
    temperature, pressure, humidity = BME.readBME280A11()
    return temperature, pressure, humidity

def send_data_to_coordinator(temperature, pressure):
    message = f"Temp: {temperature:.2f} C, Pressure: {pressure:.2f} hPa"
    ser.write(message.encode())
    print(f"Sent to coordinator: {message}")

def main():
    while True:
        try:
            temperature, pressure, humidity = read_bme280()
            print(f"Temperature: {temperature:.2f} C")
            print(f"Pressure: {pressure:.2f} hPa")
            print(f"Humidity: {humidity:.2f} %")

            send_data_to_coordinator(temperature, pressure)
            time.sleep(3)  # Adjust the sleep time as needed

        except Exception as e:
            print(f"Error: {e}")
            time.sleep(3)

if __name__ == "__main__":
    main()





import time
import serial

# Initialize the serial connection for Zigbee communication
ser = serial.Serial(port='/dev/ttyUSB0', baudrate=9600, parity=serial.PARITY_NONE, stopbits=serial.STOPBITS_ONE, bytesize=serial.EIGHTBITS, timeout=1)

def main():
    while True:
        try:
            message = ser.readline().decode().strip()
            if message:
                print(f"Received from end device: {message}")

        except Exception as e:
            print(f"Error: {e}")
            time.sleep(1)

if __name__ == "__main__":
    main()
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
3rd
#include <SoftwareSerial.h>

const int trigPin = 9;
const int echoPin = 10;
const float speedOfSound = 34300; // in cm/s
SoftwareSerial xbeeSerial(0, 1); // RX, TX

void setup() {
  Serial.begin(9600);
  xbeeSerial.begin(9600);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  delay(1000);
}

void loop() {
  long duration = measureDistance();
  float distance = calculateDistance(duration);
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");
  sendData(distance);
  delay(1000);
}

long measureDistance() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  long duration = pulseIn(echoPin, HIGH);
  return duration;
}

float calculateDistance(long duration) {
  float distance = (duration * speedOfSound) / 2 / 10000; // cm
  return distance;
}

void sendData(float distance) {
  String distanceStr = String(distance);
  xbeeSerial.print(distanceStr);
  xbeeSerial.print("\n");
}


  
  
  